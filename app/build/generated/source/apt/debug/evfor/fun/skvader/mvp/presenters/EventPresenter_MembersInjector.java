// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import com.pacoworks.rxpaper2.RxPaperBook;
import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.ActUpdate;
import evfor.fun.skvader.models.AgeRestriction;
import evfor.fun.skvader.models.FullAct;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.network.api.ContentApi;
import evfor.fun.skvader.network.api.MainApi;
import evfor.fun.skvader.repository.ReaderRepos;
import io.reactivex.Completable;
import io.reactivex.Single;
import javax.inject.Provider;

public final class EventPresenter_MembersInjector implements MembersInjector<EventPresenter> {
  private final Provider<MainApi> apiProvider;

  private final Provider<Interactor<Single<FullAct>, ActId>> fullActInterceptorProvider;

  private final Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider;

  private final Provider<Interactor<Completable, ActUpdate>> inOutActProvider;

  private final Provider<Interactor<String, Act>> shapinDateInteractorProvider;

  private final Provider<Interactor<Completable, AgeRestriction>> checkAgeRestrictionProvider;

  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  private final Provider<ContentApi> contentApiProvider;

  private final Provider<RxPaperBook> bookProvider;

  public EventPresenter_MembersInjector(
      Provider<MainApi> apiProvider,
      Provider<Interactor<Single<FullAct>, ActId>> fullActInterceptorProvider,
      Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider,
      Provider<Interactor<Completable, ActUpdate>> inOutActProvider,
      Provider<Interactor<String, Act>> shapinDateInteractorProvider,
      Provider<Interactor<Completable, AgeRestriction>> checkAgeRestrictionProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<ContentApi> contentApiProvider,
      Provider<RxPaperBook> bookProvider) {
    assert apiProvider != null;
    this.apiProvider = apiProvider;
    assert fullActInterceptorProvider != null;
    this.fullActInterceptorProvider = fullActInterceptorProvider;
    assert jointActInterceptorProvider != null;
    this.jointActInterceptorProvider = jointActInterceptorProvider;
    assert inOutActProvider != null;
    this.inOutActProvider = inOutActProvider;
    assert shapinDateInteractorProvider != null;
    this.shapinDateInteractorProvider = shapinDateInteractorProvider;
    assert checkAgeRestrictionProvider != null;
    this.checkAgeRestrictionProvider = checkAgeRestrictionProvider;
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
    assert contentApiProvider != null;
    this.contentApiProvider = contentApiProvider;
    assert bookProvider != null;
    this.bookProvider = bookProvider;
  }

  public static MembersInjector<EventPresenter> create(
      Provider<MainApi> apiProvider,
      Provider<Interactor<Single<FullAct>, ActId>> fullActInterceptorProvider,
      Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider,
      Provider<Interactor<Completable, ActUpdate>> inOutActProvider,
      Provider<Interactor<String, Act>> shapinDateInteractorProvider,
      Provider<Interactor<Completable, AgeRestriction>> checkAgeRestrictionProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<ContentApi> contentApiProvider,
      Provider<RxPaperBook> bookProvider) {
    return new EventPresenter_MembersInjector(
        apiProvider,
        fullActInterceptorProvider,
        jointActInterceptorProvider,
        inOutActProvider,
        shapinDateInteractorProvider,
        checkAgeRestrictionProvider,
        userReaderProvider,
        contentApiProvider,
        bookProvider);
  }

  @Override
  public void injectMembers(EventPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.api = apiProvider.get();
    instance.fullActInterceptor = fullActInterceptorProvider.get();
    instance.jointActInterceptor = jointActInterceptorProvider.get();
    instance.inOutAct = inOutActProvider.get();
    instance.shapinDateInteractor = shapinDateInteractorProvider.get();
    instance.checkAgeRestriction = checkAgeRestrictionProvider.get();
    instance.userReader = userReaderProvider.get();
    instance.contentApi = contentApiProvider.get();
    instance.book = bookProvider.get();
  }

  public static void injectApi(EventPresenter instance, Provider<MainApi> apiProvider) {
    instance.api = apiProvider.get();
  }

  public static void injectFullActInterceptor(
      EventPresenter instance,
      Provider<Interactor<Single<FullAct>, ActId>> fullActInterceptorProvider) {
    instance.fullActInterceptor = fullActInterceptorProvider.get();
  }

  public static void injectJointActInterceptor(
      EventPresenter instance,
      Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider) {
    instance.jointActInterceptor = jointActInterceptorProvider.get();
  }

  public static void injectInOutAct(
      EventPresenter instance, Provider<Interactor<Completable, ActUpdate>> inOutActProvider) {
    instance.inOutAct = inOutActProvider.get();
  }

  public static void injectShapinDateInteractor(
      EventPresenter instance, Provider<Interactor<String, Act>> shapinDateInteractorProvider) {
    instance.shapinDateInteractor = shapinDateInteractorProvider.get();
  }

  public static void injectCheckAgeRestriction(
      EventPresenter instance,
      Provider<Interactor<Completable, AgeRestriction>> checkAgeRestrictionProvider) {
    instance.checkAgeRestriction = checkAgeRestrictionProvider.get();
  }

  public static void injectUserReader(
      EventPresenter instance, Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    instance.userReader = userReaderProvider.get();
  }

  public static void injectContentApi(
      EventPresenter instance, Provider<ContentApi> contentApiProvider) {
    instance.contentApi = contentApiProvider.get();
  }

  public static void injectBook(EventPresenter instance, Provider<RxPaperBook> bookProvider) {
    instance.book = bookProvider.get();
  }
}
