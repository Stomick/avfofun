// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.dagger2.modules;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import evfor.fun.skvader.utils.RxCallAdapter;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Converter;
import retrofit2.Retrofit;

public final class RetrofitModule_ProvideRetrofitBuilderFactory
    implements Factory<Retrofit.Builder> {
  private final Provider<Converter.Factory> converterFactoryProvider;

  private final Provider<OkHttpClient> clientProvider;

  private final Provider<RxCallAdapter> adapterProvider;

  public RetrofitModule_ProvideRetrofitBuilderFactory(
      Provider<Converter.Factory> converterFactoryProvider,
      Provider<OkHttpClient> clientProvider,
      Provider<RxCallAdapter> adapterProvider) {
    assert converterFactoryProvider != null;
    this.converterFactoryProvider = converterFactoryProvider;
    assert clientProvider != null;
    this.clientProvider = clientProvider;
    assert adapterProvider != null;
    this.adapterProvider = adapterProvider;
  }

  @Override
  public Retrofit.Builder get() {
    return Preconditions.checkNotNull(
        RetrofitModule.provideRetrofitBuilder(
            converterFactoryProvider.get(), clientProvider.get(), adapterProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Retrofit.Builder> create(
      Provider<Converter.Factory> converterFactoryProvider,
      Provider<OkHttpClient> clientProvider,
      Provider<RxCallAdapter> adapterProvider) {
    return new RetrofitModule_ProvideRetrofitBuilderFactory(
        converterFactoryProvider, clientProvider, adapterProvider);
  }
}
