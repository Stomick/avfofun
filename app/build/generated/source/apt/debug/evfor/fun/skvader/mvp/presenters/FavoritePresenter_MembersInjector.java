// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import javax.inject.Provider;

public final class FavoritePresenter_MembersInjector implements MembersInjector<FavoritePresenter> {
  private final Provider<ReaderRepos<Act, ActId>> readerReposProvider;

  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  public FavoritePresenter_MembersInjector(
      Provider<ReaderRepos<Act, ActId>> readerReposProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    assert readerReposProvider != null;
    this.readerReposProvider = readerReposProvider;
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
  }

  public static MembersInjector<FavoritePresenter> create(
      Provider<ReaderRepos<Act, ActId>> readerReposProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    return new FavoritePresenter_MembersInjector(readerReposProvider, userReaderProvider);
  }

  @Override
  public void injectMembers(FavoritePresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.readerRepos = readerReposProvider.get();
    instance.userReader = userReaderProvider.get();
  }

  public static void injectReaderRepos(
      FavoritePresenter instance, Provider<ReaderRepos<Act, ActId>> readerReposProvider) {
    instance.readerRepos = readerReposProvider.get();
  }

  public static void injectUserReader(
      FavoritePresenter instance, Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    instance.userReader = userReaderProvider.get();
  }
}
