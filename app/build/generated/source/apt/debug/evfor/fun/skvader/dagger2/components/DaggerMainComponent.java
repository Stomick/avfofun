// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.dagger2.components;

import android.app.NotificationManager;
import android.content.Context;
import android.graphics.Bitmap;
import android.media.MediaPlayer;
import android.support.v4.app.NotificationCompat;
import com.google.gson.Gson;
import com.pacoworks.rxpaper2.RxPaperBook;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import evfor.fun.skvader.convertors.Converter;
import evfor.fun.skvader.convertors.NotificationConverter_Factory;
import evfor.fun.skvader.dagger2.modules.ChatModule;
import evfor.fun.skvader.dagger2.modules.ChatModule_ProvideModelConnectFactory;
import evfor.fun.skvader.dagger2.modules.ChatModule_ProvideSocketClientFactory;
import evfor.fun.skvader.dagger2.modules.ChatModule_ProvideSocketClientOptionsFactory;
import evfor.fun.skvader.dagger2.modules.MainModule_ProvideBookFactory;
import evfor.fun.skvader.dagger2.modules.MainModule_ProvideMainApiFactory;
import evfor.fun.skvader.dagger2.modules.MainModule_ProvideNotificationCompatBuilderFactory;
import evfor.fun.skvader.dagger2.modules.MainModule_ProvideNotificationManagerFactory;
import evfor.fun.skvader.dagger2.modules.MainModule_ProvideSocketMessangerFactory;
import evfor.fun.skvader.interceptors.ActListProvider;
import evfor.fun.skvader.interceptors.ActListProvider_Factory;
import evfor.fun.skvader.interceptors.AdministrationAct;
import evfor.fun.skvader.interceptors.AdministrationAct_Factory;
import evfor.fun.skvader.interceptors.AsyncList;
import evfor.fun.skvader.interceptors.CheckAgeRestrictionInteractor;
import evfor.fun.skvader.interceptors.CheckAgeRestrictionInteractor_Factory;
import evfor.fun.skvader.interceptors.EditPasswordInteractor;
import evfor.fun.skvader.interceptors.EditPasswordInteractor_Factory;
import evfor.fun.skvader.interceptors.FullActInterceptor;
import evfor.fun.skvader.interceptors.FullActInterceptor_Factory;
import evfor.fun.skvader.interceptors.GetAgeInteractor_Factory;
import evfor.fun.skvader.interceptors.InOutActInteractor;
import evfor.fun.skvader.interceptors.InOutActInteractor_Factory;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.interceptors.JointActsInteractor;
import evfor.fun.skvader.interceptors.JointActsInteractor_Factory;
import evfor.fun.skvader.interceptors.LoadParticipantsInteractor;
import evfor.fun.skvader.interceptors.LoadParticipantsInteractor_Factory;
import evfor.fun.skvader.interceptors.MessagesLoaderInteractor;
import evfor.fun.skvader.interceptors.MessagesLoaderInteractor_Factory;
import evfor.fun.skvader.interceptors.NotificationsInteractor;
import evfor.fun.skvader.interceptors.NotificationsInteractor_Factory;
import evfor.fun.skvader.interceptors.SendFeedback;
import evfor.fun.skvader.interceptors.SendFeedback_Factory;
import evfor.fun.skvader.interceptors.SendSocInteractor;
import evfor.fun.skvader.interceptors.SendSocInteractor_Factory;
import evfor.fun.skvader.interceptors.UpdatePhotoInteractor;
import evfor.fun.skvader.interceptors.UpdatePhotoInteractor_Factory;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActAdmin;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.ActUpdate;
import evfor.fun.skvader.models.AgeRestriction;
import evfor.fun.skvader.models.Category;
import evfor.fun.skvader.models.DistributionParticipant;
import evfor.fun.skvader.models.FeedBack;
import evfor.fun.skvader.models.FilterModel;
import evfor.fun.skvader.models.FullAct;
import evfor.fun.skvader.models.Message;
import evfor.fun.skvader.models.NewPassword;
import evfor.fun.skvader.models.Notification;
import evfor.fun.skvader.models.NotificationCount;
import evfor.fun.skvader.models.NotificationFilter;
import evfor.fun.skvader.models.RqChat;
import evfor.fun.skvader.models.Social;
import evfor.fun.skvader.models.UpdatePhoto;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.mvp.presenters.ActListPresenter;
import evfor.fun.skvader.mvp.presenters.ActListPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.CabinetPresenter;
import evfor.fun.skvader.mvp.presenters.CabinetPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.ChangePasswordPresenter;
import evfor.fun.skvader.mvp.presenters.ChangePasswordPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.ComplaintPresenter;
import evfor.fun.skvader.mvp.presenters.ComplaintPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.CreateEventCommPresenter;
import evfor.fun.skvader.mvp.presenters.CreateEventCommPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.DialogPresenter;
import evfor.fun.skvader.mvp.presenters.DialogPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.EditCategoriesPresenter;
import evfor.fun.skvader.mvp.presenters.EditCategoriesPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.EditProfilePresenter;
import evfor.fun.skvader.mvp.presenters.EditProfilePresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.EventPresenter;
import evfor.fun.skvader.mvp.presenters.EventPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.FavoritePresenter;
import evfor.fun.skvader.mvp.presenters.FavoritePresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.GiveFeedbackPresenter;
import evfor.fun.skvader.mvp.presenters.GiveFeedbackPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.NotificationPresenter;
import evfor.fun.skvader.mvp.presenters.NotificationPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.PartsPresenter;
import evfor.fun.skvader.mvp.presenters.PartsPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.RegPrewPresenter;
import evfor.fun.skvader.mvp.presenters.RegPrewPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.SearchPresenter;
import evfor.fun.skvader.mvp.presenters.SearchPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.SearchTabPresenter;
import evfor.fun.skvader.mvp.presenters.SearchTabPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.SocPresenter;
import evfor.fun.skvader.mvp.presenters.SocPresenter_MembersInjector;
import evfor.fun.skvader.mvp.presenters.TabsPresenter;
import evfor.fun.skvader.mvp.presenters.TabsPresenter_MembersInjector;
import evfor.fun.skvader.network.api.ChatApi;
import evfor.fun.skvader.network.api.ContentApi;
import evfor.fun.skvader.network.api.MainApi;
import evfor.fun.skvader.network.models.response.RsAct;
import evfor.fun.skvader.network.models.response.RsBase;
import evfor.fun.skvader.network.models.response.RsNotification;
import evfor.fun.skvader.repository.LocalRepository;
import evfor.fun.skvader.repository.PaperRepos_Factory;
import evfor.fun.skvader.repository.ReaderRepos;
import evfor.fun.skvader.repository.Updater;
import evfor.fun.skvader.repository.WriterRepos;
import evfor.fun.skvader.repository.act.ActReader;
import evfor.fun.skvader.repository.act.ActReader_Factory;
import evfor.fun.skvader.repository.act.ActWriter;
import evfor.fun.skvader.repository.act.ActWriter_Factory;
import evfor.fun.skvader.repository.cache.Cache;
import evfor.fun.skvader.repository.data_provide.DataProvide;
import evfor.fun.skvader.repository.data_provide.NotificationCountProvider;
import evfor.fun.skvader.repository.data_provide.NotificationCountProvider_Factory;
import evfor.fun.skvader.repository.user.EditUserProfile;
import evfor.fun.skvader.repository.user.EditUserProfile_Factory;
import evfor.fun.skvader.repository.user.UserReader;
import evfor.fun.skvader.repository.user.UserReader_Factory;
import evfor.fun.skvader.repository.user.UserUpdater;
import evfor.fun.skvader.repository.user.UserUpdater_Factory;
import evfor.fun.skvader.ui.activities.ReviewActivity;
import evfor.fun.skvader.ui.activities.ReviewActivity_MembersInjector;
import evfor.fun.skvader.ui.utils.reg_step_view.Step2;
import evfor.fun.skvader.ui.utils.reg_step_view.Step2_MembersInjector;
import evfor.fun.skvader.utils.AccountPreferenceManager;
import evfor.fun.skvader.utils.PermissionController;
import evfor.fun.skvader.utils.media.play.AudioPlayer;
import evfor.fun.skvader.utils.media.play.AudioPlayerImpl;
import evfor.fun.skvader.utils.media.play.AudioPlayerImpl_Factory;
import evfor.fun.skvader.utils.media.record.AudioRecorder;
import evfor.fun.skvader.utils.media.record.AudioRecorderImpl;
import evfor.fun.skvader.utils.media.record.AudioRecorderImpl_Factory;
import evfor.fun.skvader.utils.notification.NotificationsUtils;
import evfor.fun.skvader.utils.notification.NotificationsUtils_MembersInjector;
import evfor.fun.skvader.utils.socket.SocketImpl;
import evfor.fun.skvader.utils.socket.SocketImpl_Factory;
import evfor.fun.skvader.utils.socket.SocketMessenger;
import evfor.fun.skvader.utils.socket.SocketMessenger_MembersInjector;
import evfor.fun.skvader.utils.socket.listeners.MessageReadListener;
import evfor.fun.skvader.utils.socket.listeners.MessageReadListener_Factory;
import evfor.fun.skvader.utils.socket.listeners.MessageReceiver;
import evfor.fun.skvader.utils.socket.listeners.MessageReceiver_Factory;
import evfor.fun.skvader.utils.socket.listeners.MessageSender;
import evfor.fun.skvader.utils.socket.listeners.MessageSender_Factory;
import evfor.fun.skvader.utils.socket.listeners.ReadingInteractor;
import evfor.fun.skvader.utils.socket.listeners.ReadingInteractor_Factory;
import evfor.fun.skvader.utils.socket.listeners.SocketStateListener;
import evfor.fun.skvader.utils.socket.listeners.SocketStateListener_Factory;
import evfor.fun.skvader.utils.socket.listeners.WriteMessageListener;
import evfor.fun.skvader.utils.socket.listeners.WriteMessageListener_Factory;
import evfor.fun.skvader.utils.socket.listeners.WritingInteractor;
import evfor.fun.skvader.utils.socket.listeners.WritingInteractor_Factory;
import evfor.fun.skvader.utils.socket.listeners.iSocketListener;
import evfor.fun.skvader.utils.socket.models.MessageListReaded;
import evfor.fun.skvader.utils.socket.models.MessageRead;
import evfor.fun.skvader.utils.socket.models.MessageReceive;
import evfor.fun.skvader.utils.socket.models.MessageSend;
import evfor.fun.skvader.utils.socket.models.ModelConnect;
import evfor.fun.skvader.utils.socket.models.SocketState;
import evfor.fun.skvader.utils.socket.models.Writer;
import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.socket.client.IO;
import io.socket.client.Socket;
import java.util.Calendar;
import java.util.List;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerMainComponent implements MainComponent {
  private Provider<DataProvide<List<Category>>> generalCategoryProvider;

  private Provider<Interactor<Observable<Act>, FilterModel>> filterProvider;

  private MembersInjector<SearchTabPresenter> searchTabPresenterMembersInjector;

  private Provider<Retrofit> retrofitProvider;

  private Provider<MainApi> provideMainApiProvider;

  private Provider<LocalRepository<User, Integer>> provideLocalUserReposProvider;

  private Provider<Cache<Integer, User>> userCacheProvider;

  private Provider<UserReader> userReaderProvider;

  private Provider<ReaderRepos<User, Integer>> provideUserReaderReposProvider;

  private Provider<EditUserProfile> editUserProfileProvider;

  private Provider<WriterRepos<User>> provideUserWriterReposProvider;

  private Provider<UserUpdater> userUpdaterProvider;

  private Provider<Updater<User, Integer>> provideUserUpdaterProvider;

  private Provider<NotificationCountProvider> notificationCountProvider;

  private Provider<DataProvide<NotificationCount>> notificationCountProvider2;

  private MembersInjector<TabsPresenter> tabsPresenterMembersInjector;

  private Provider<JointActsInteractor> jointActsInteractorProvider;

  private Provider<Interactor<Single<ActId>, String>> provideJointActInteractorProvider;

  private Provider<UpdatePhotoInteractor> updatePhotoInteractorProvider;

  private Provider<Interactor<Completable, UpdatePhoto>> provideUpdatePhotoProvider;

  private Provider<Interactor<Single<Category>, String>> categoryByIdProvider;

  private Provider<Converter<Act, RsAct>> actConverterProvider;

  private Provider<Cache<ActId, Act>> actCacheProvider;

  private Provider<ActReader> actReaderProvider;

  private Provider<ReaderRepos<Act, ActId>> provideActReaderReposProvider;

  private MembersInjector<CabinetPresenter> cabinetPresenterMembersInjector;

  private Provider<ActWriter> actWriterProvider;

  private Provider<WriterRepos<Act>> provideActWriterReposProvider;

  private MembersInjector<CreateEventCommPresenter> createEventCommPresenterMembersInjector;

  private Provider<AccountPreferenceManager> accountPreferenceManagerProvider;

  private MembersInjector<EditProfilePresenter> editProfilePresenterMembersInjector;

  private Provider<FullActInterceptor> fullActInterceptorProvider;

  private Provider<Interactor<Single<FullAct>, ActId>> provideFullActInterceptorProvider;

  private Provider<InOutActInteractor> inOutActInteractorProvider;

  private Provider<Interactor<Completable, ActUpdate>> privodeJoinActProvider;

  private Provider<Interactor<String, Act>> shappingDateInteractorProvider;

  private Provider<Interactor<Integer, Calendar>> provideGetAgeInteractorProvider;

  private Provider<CheckAgeRestrictionInteractor> checkAgeRestrictionInteractorProvider;

  private Provider<Interactor<Completable, AgeRestriction>>
      privodeCheckAgeRestrictionInteractorProvider;

  private Provider<ContentApi> contentApiProvider;

  private Provider<RxPaperBook> provideBookProvider;

  private MembersInjector<EventPresenter> eventPresenterMembersInjector;

  private Provider<EditPasswordInteractor> editPasswordInteractorProvider;

  private Provider<Interactor<Completable, NewPassword>> provideNewPasswordProvider;

  private MembersInjector<ChangePasswordPresenter> changePasswordPresenterMembersInjector;

  private Provider<AsyncList<ActId>> banedListProvider;

  private MembersInjector<SearchPresenter> searchPresenterMembersInjector;

  private Provider<PermissionController> permissionControllerProvider;

  private MembersInjector<RegPrewPresenter> regPrewPresenterMembersInjector;

  private MembersInjector<EditCategoriesPresenter> editCategoriesPresenterMembersInjector;

  private Provider<SocketMessenger> provideSocketMessangerProvider;

  private Provider<LoadParticipantsInteractor> loadParticipantsInteractorProvider;

  private Provider<Interactor<Observable<? extends User>, ActAdmin>> privodeParticipantProvider;

  private Provider<ChatApi> chatApiProvider;

  private Provider<MessagesLoaderInteractor> messagesLoaderInteractorProvider;

  private Provider<Interactor<Observable<Message>, RqChat>> provideMessageLoaderProvider;

  private Provider<AudioRecorderImpl> audioRecorderImplProvider;

  private Provider<AudioRecorder> provideAudioRecorderProvider;

  private Provider<MediaPlayer> mediaPlayerProvider;

  private Provider<AudioPlayerImpl> audioPlayerImplProvider;

  private Provider<AudioPlayer> provideAudioPlayerProvider;

  private MembersInjector<DialogPresenter> dialogPresenterMembersInjector;

  private Provider<AdministrationAct> administrationActProvider;

  private Provider<Interactor<Completable, DistributionParticipant>>
      provideAdministrationActProvider;

  private MembersInjector<PartsPresenter> partsPresenterMembersInjector;

  private MembersInjector<ComplaintPresenter> complaintPresenterMembersInjector;

  private MembersInjector<FavoritePresenter> favoritePresenterMembersInjector;

  private Provider<ActListProvider> actListProvider;

  private Provider<ReaderRepos<List<Act>, User>> provideActListReaderProvider;

  private MembersInjector<ActListPresenter> actListPresenterMembersInjector;

  private Provider<Converter<Notification, RsNotification.Notification>>
      provideNotificationConverterProvider;

  private Provider<NotificationsInteractor> notificationsInteractorProvider;

  private Provider<Interactor<Observable<Notification>, NotificationFilter>>
      provideNotovicationsProvider;

  private MembersInjector<NotificationPresenter> notificationPresenterMembersInjector;

  private Provider<Context> contextProvider;

  private Provider<Interactor<Single<Bitmap>, String>> imageLoaderProvider;

  private Provider<NotificationManager> provideNotificationManagerProvider;

  private Provider<NotificationCompat.Builder> provideNotificationCompatBuilderProvider;

  private MembersInjector<NotificationsUtils> notificationsUtilsMembersInjector;

  private Provider<SendSocInteractor> sendSocInteractorProvider;

  private Provider<Interactor<Completable, Social>> sendSocialProvider;

  private MembersInjector<SocPresenter> socPresenterMembersInjector;

  private Provider<SendFeedback> sendFeedbackProvider;

  private Provider<Interactor<Single<RsBase>, FeedBack>> provideFeedBackSenderProvider;

  private MembersInjector<GiveFeedbackPresenter> giveFeedbackPresenterMembersInjector;

  private MembersInjector<Step2> step2MembersInjector;

  private MembersInjector<ReviewActivity> reviewActivityMembersInjector;

  private Provider<Gson> gsonProvider;

  private DaggerMainComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.generalCategoryProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_generalCategoryProvider(
            builder.appComponent);

    this.filterProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_filter(builder.appComponent);

    this.searchTabPresenterMembersInjector =
        SearchTabPresenter_MembersInjector.create(generalCategoryProvider, filterProvider);

    this.retrofitProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_retrofit(builder.appComponent);

    this.provideMainApiProvider =
        DoubleCheck.provider(MainModule_ProvideMainApiFactory.create(retrofitProvider));

    this.provideLocalUserReposProvider =
        DoubleCheck.provider((Provider) PaperRepos_Factory.<User>create());

    this.userCacheProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_userCache(builder.appComponent);

    this.userReaderProvider =
        UserReader_Factory.create(
            provideMainApiProvider, provideLocalUserReposProvider, userCacheProvider);

    this.provideUserReaderReposProvider = DoubleCheck.provider((Provider) userReaderProvider);

    this.editUserProfileProvider =
        EditUserProfile_Factory.create(
            provideMainApiProvider, provideLocalUserReposProvider, provideUserReaderReposProvider);

    this.provideUserWriterReposProvider = DoubleCheck.provider((Provider) editUserProfileProvider);

    this.userUpdaterProvider =
        UserUpdater_Factory.create(provideUserReaderReposProvider, provideUserWriterReposProvider);

    this.provideUserUpdaterProvider = DoubleCheck.provider((Provider) userUpdaterProvider);

    this.notificationCountProvider =
        NotificationCountProvider_Factory.create(provideMainApiProvider);

    this.notificationCountProvider2 = DoubleCheck.provider((Provider) notificationCountProvider);

    this.tabsPresenterMembersInjector =
        TabsPresenter_MembersInjector.create(
            provideUserReaderReposProvider, provideUserUpdaterProvider, notificationCountProvider2);

    this.jointActsInteractorProvider =
        JointActsInteractor_Factory.create(provideUserReaderReposProvider);

    this.provideJointActInteractorProvider =
        DoubleCheck.provider((Provider) jointActsInteractorProvider);

    this.updatePhotoInteractorProvider =
        UpdatePhotoInteractor_Factory.create(provideMainApiProvider, provideLocalUserReposProvider);

    this.provideUpdatePhotoProvider =
        DoubleCheck.provider((Provider) updatePhotoInteractorProvider);

    this.categoryByIdProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_categoryById(builder.appComponent);

    this.actConverterProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_actConverter(builder.appComponent);

    this.actCacheProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_actCache(builder.appComponent);

    this.actReaderProvider =
        ActReader_Factory.create(
            provideMainApiProvider, categoryByIdProvider, actConverterProvider, actCacheProvider);

    this.provideActReaderReposProvider = DoubleCheck.provider((Provider) actReaderProvider);

    this.cabinetPresenterMembersInjector =
        CabinetPresenter_MembersInjector.create(
            provideUserReaderReposProvider,
            provideJointActInteractorProvider,
            provideUserWriterReposProvider,
            provideUpdatePhotoProvider,
            provideActReaderReposProvider);

    this.actWriterProvider =
        ActWriter_Factory.create(
            provideMainApiProvider, provideUserReaderReposProvider, provideLocalUserReposProvider);

    this.provideActWriterReposProvider = DoubleCheck.provider((Provider) actWriterProvider);

    this.createEventCommPresenterMembersInjector =
        CreateEventCommPresenter_MembersInjector.create(
            generalCategoryProvider, provideActReaderReposProvider, provideActWriterReposProvider);

    this.accountPreferenceManagerProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_accountPreferenceManager(
            builder.appComponent);

    this.editProfilePresenterMembersInjector =
        EditProfilePresenter_MembersInjector.create(
            provideUserReaderReposProvider,
            provideUserWriterReposProvider,
            accountPreferenceManagerProvider);

    this.fullActInterceptorProvider =
        FullActInterceptor_Factory.create(
            provideActReaderReposProvider, provideUserReaderReposProvider);

    this.provideFullActInterceptorProvider =
        DoubleCheck.provider((Provider) fullActInterceptorProvider);

    this.inOutActInteractorProvider =
        InOutActInteractor_Factory.create(
            provideMainApiProvider, editUserProfileProvider, userReaderProvider);

    this.privodeJoinActProvider = DoubleCheck.provider((Provider) inOutActInteractorProvider);

    this.shappingDateInteractorProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_shappingDateInteractor(
            builder.appComponent);

    this.provideGetAgeInteractorProvider =
        DoubleCheck.provider((Provider) GetAgeInteractor_Factory.create());

    this.checkAgeRestrictionInteractorProvider =
        CheckAgeRestrictionInteractor_Factory.create(
            provideUserReaderReposProvider, provideGetAgeInteractorProvider);

    this.privodeCheckAgeRestrictionInteractorProvider =
        DoubleCheck.provider((Provider) checkAgeRestrictionInteractorProvider);

    this.contentApiProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_contentApi(builder.appComponent);

    this.provideBookProvider = DoubleCheck.provider(MainModule_ProvideBookFactory.create());

    this.eventPresenterMembersInjector =
        EventPresenter_MembersInjector.create(
            provideMainApiProvider,
            provideFullActInterceptorProvider,
            provideJointActInteractorProvider,
            privodeJoinActProvider,
            shappingDateInteractorProvider,
            privodeCheckAgeRestrictionInteractorProvider,
            provideUserReaderReposProvider,
            contentApiProvider,
            provideBookProvider);

    this.editPasswordInteractorProvider =
        EditPasswordInteractor_Factory.create(provideMainApiProvider);

    this.provideNewPasswordProvider =
        DoubleCheck.provider((Provider) editPasswordInteractorProvider);

    this.changePasswordPresenterMembersInjector =
        ChangePasswordPresenter_MembersInjector.create(provideNewPasswordProvider);

    this.banedListProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_banedList(builder.appComponent);

    this.searchPresenterMembersInjector =
        SearchPresenter_MembersInjector.create(
            contentApiProvider,
            provideMainApiProvider,
            banedListProvider,
            filterProvider,
            privodeJoinActProvider);

    this.permissionControllerProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_permissionController(
            builder.appComponent);

    this.regPrewPresenterMembersInjector =
        RegPrewPresenter_MembersInjector.create(
            provideUserWriterReposProvider,
            provideUserReaderReposProvider,
            generalCategoryProvider,
            permissionControllerProvider);

    this.editCategoriesPresenterMembersInjector =
        EditCategoriesPresenter_MembersInjector.create(
            provideUserUpdaterProvider,
            provideUserReaderReposProvider,
            generalCategoryProvider,
            provideMainApiProvider,
            contentApiProvider,
            provideBookProvider);

    this.provideSocketMessangerProvider =
        DoubleCheck.provider(MainModule_ProvideSocketMessangerFactory.create());

    this.loadParticipantsInteractorProvider =
        LoadParticipantsInteractor_Factory.create(
            provideActReaderReposProvider, provideUserReaderReposProvider, provideMainApiProvider);

    this.privodeParticipantProvider =
        DoubleCheck.provider((Provider) loadParticipantsInteractorProvider);

    this.chatApiProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_chatApi(builder.appComponent);

    this.messagesLoaderInteractorProvider =
        MessagesLoaderInteractor_Factory.create(chatApiProvider);

    this.provideMessageLoaderProvider =
        DoubleCheck.provider((Provider) messagesLoaderInteractorProvider);

    this.audioRecorderImplProvider = AudioRecorderImpl_Factory.create(permissionControllerProvider);

    this.provideAudioRecorderProvider = DoubleCheck.provider((Provider) audioRecorderImplProvider);

    this.mediaPlayerProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_mediaPlayer(builder.appComponent);

    this.audioPlayerImplProvider =
        AudioPlayerImpl_Factory.create(mediaPlayerProvider, permissionControllerProvider);

    this.provideAudioPlayerProvider = DoubleCheck.provider((Provider) audioPlayerImplProvider);

    this.dialogPresenterMembersInjector =
        DialogPresenter_MembersInjector.create(
            provideSocketMessangerProvider,
            permissionControllerProvider,
            privodeParticipantProvider,
            provideMessageLoaderProvider,
            provideUserReaderReposProvider,
            provideJointActInteractorProvider,
            provideActReaderReposProvider,
            provideAudioRecorderProvider,
            provideAudioPlayerProvider);

    this.administrationActProvider = AdministrationAct_Factory.create(provideMainApiProvider);

    this.provideAdministrationActProvider =
        DoubleCheck.provider((Provider) administrationActProvider);

    this.partsPresenterMembersInjector =
        PartsPresenter_MembersInjector.create(
            privodeParticipantProvider,
            provideJointActInteractorProvider,
            provideActReaderReposProvider,
            provideAdministrationActProvider);

    this.complaintPresenterMembersInjector =
        ComplaintPresenter_MembersInjector.create(provideMainApiProvider);

    this.favoritePresenterMembersInjector =
        FavoritePresenter_MembersInjector.create(
            provideActReaderReposProvider, provideUserReaderReposProvider);

    this.actListProvider = ActListProvider_Factory.create(provideActReaderReposProvider);

    this.provideActListReaderProvider = DoubleCheck.provider((Provider) actListProvider);

    this.actListPresenterMembersInjector =
        ActListPresenter_MembersInjector.create(
            provideActListReaderProvider, provideUserReaderReposProvider);

    this.provideNotificationConverterProvider =
        DoubleCheck.provider((Provider) NotificationConverter_Factory.create());

    this.notificationsInteractorProvider =
        NotificationsInteractor_Factory.create(
            provideMainApiProvider, provideNotificationConverterProvider);

    this.provideNotovicationsProvider =
        DoubleCheck.provider((Provider) notificationsInteractorProvider);

    this.notificationPresenterMembersInjector =
        NotificationPresenter_MembersInjector.create(provideNotovicationsProvider);

    this.contextProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_context(builder.appComponent);

    this.imageLoaderProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_imageLoader(builder.appComponent);

    this.provideNotificationManagerProvider =
        DoubleCheck.provider(MainModule_ProvideNotificationManagerFactory.create(contextProvider));

    this.provideNotificationCompatBuilderProvider =
        DoubleCheck.provider(
            MainModule_ProvideNotificationCompatBuilderFactory.create(contextProvider));

    this.notificationsUtilsMembersInjector =
        NotificationsUtils_MembersInjector.create(
            contextProvider,
            provideNotificationConverterProvider,
            imageLoaderProvider,
            provideNotificationManagerProvider,
            provideNotificationCompatBuilderProvider);

    this.sendSocInteractorProvider = SendSocInteractor_Factory.create(provideMainApiProvider);

    this.sendSocialProvider = DoubleCheck.provider((Provider) sendSocInteractorProvider);

    this.socPresenterMembersInjector =
        SocPresenter_MembersInjector.create(
            sendSocialProvider, provideUserUpdaterProvider, provideUserReaderReposProvider);

    this.sendFeedbackProvider = SendFeedback_Factory.create(provideMainApiProvider);

    this.provideFeedBackSenderProvider = DoubleCheck.provider((Provider) sendFeedbackProvider);

    this.giveFeedbackPresenterMembersInjector =
        GiveFeedbackPresenter_MembersInjector.create(
            provideActReaderReposProvider,
            provideUserReaderReposProvider,
            provideFeedBackSenderProvider,
            provideGetAgeInteractorProvider);

    this.step2MembersInjector = Step2_MembersInjector.create(provideUpdatePhotoProvider);

    this.reviewActivityMembersInjector =
        ReviewActivity_MembersInjector.create(provideMainApiProvider, userReaderProvider);

    this.gsonProvider =
        new evfor_fun_skvader_dagger2_components_AppComponent_gson(builder.appComponent);
  }

  @Override
  public void inject(SearchTabPresenter presenter) {
    searchTabPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(TabsPresenter presenter) {
    tabsPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(CabinetPresenter presenter) {
    cabinetPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(CreateEventCommPresenter presenter) {
    createEventCommPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(EditProfilePresenter presenter) {
    editProfilePresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(EventPresenter presenter) {
    eventPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(ChangePasswordPresenter presenter) {
    changePasswordPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(SearchPresenter presenter) {
    searchPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(RegPrewPresenter presenter) {
    regPrewPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(EditCategoriesPresenter presenter) {
    editCategoriesPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(DialogPresenter presenter) {
    dialogPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(PartsPresenter presenter) {
    partsPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(ComplaintPresenter presenter) {
    complaintPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(FavoritePresenter presenter) {
    favoritePresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(ActListPresenter presenter) {
    actListPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(NotificationPresenter presenter) {
    notificationPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(NotificationsUtils utils) {
    notificationsUtilsMembersInjector.injectMembers(utils);
  }

  @Override
  public void inject(SocPresenter presenter) {
    socPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(GiveFeedbackPresenter presenter) {
    giveFeedbackPresenterMembersInjector.injectMembers(presenter);
  }

  @Override
  public void inject(Step2 step2) {
    step2MembersInjector.injectMembers(step2);
  }

  @Override
  public void inject(ReviewActivity reviewActivity) {
    reviewActivityMembersInjector.injectMembers(reviewActivity);
  }

  @Override
  public ChatSubComponent chatSubComponent(ChatModule chatModule) {
    return new ChatSubComponentImpl(chatModule);
  }

  public static final class Builder {
    private AppComponent appComponent;

    private Builder() {}

    public MainComponent build() {
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainComponent(this);
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_generalCategoryProvider
      implements Provider<DataProvide<List<Category>>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_generalCategoryProvider(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public DataProvide<List<Category>> get() {
      return Preconditions.checkNotNull(
          appComponent.generalCategoryProvider(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_filter
      implements Provider<Interactor<Observable<Act>, FilterModel>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_filter(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Interactor<Observable<Act>, FilterModel> get() {
      return Preconditions.checkNotNull(
          appComponent.filter(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_retrofit
      implements Provider<Retrofit> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_retrofit(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(
          appComponent.retrofit(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_userCache
      implements Provider<Cache<Integer, User>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_userCache(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Cache<Integer, User> get() {
      return Preconditions.checkNotNull(
          appComponent.userCache(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_categoryById
      implements Provider<Interactor<Single<Category>, String>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_categoryById(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Interactor<Single<Category>, String> get() {
      return Preconditions.checkNotNull(
          appComponent.categoryById(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_actConverter
      implements Provider<Converter<Act, RsAct>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_actConverter(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Converter<Act, RsAct> get() {
      return Preconditions.checkNotNull(
          appComponent.actConverter(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_actCache
      implements Provider<Cache<ActId, Act>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_actCache(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Cache<ActId, Act> get() {
      return Preconditions.checkNotNull(
          appComponent.actCache(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_accountPreferenceManager
      implements Provider<AccountPreferenceManager> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_accountPreferenceManager(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AccountPreferenceManager get() {
      return Preconditions.checkNotNull(
          appComponent.accountPreferenceManager(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_shappingDateInteractor
      implements Provider<Interactor<String, Act>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_shappingDateInteractor(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Interactor<String, Act> get() {
      return Preconditions.checkNotNull(
          appComponent.shappingDateInteractor(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_contentApi
      implements Provider<ContentApi> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_contentApi(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ContentApi get() {
      return Preconditions.checkNotNull(
          appComponent.contentApi(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_banedList
      implements Provider<AsyncList<ActId>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_banedList(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AsyncList<ActId> get() {
      return Preconditions.checkNotNull(
          appComponent.banedList(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_permissionController
      implements Provider<PermissionController> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_permissionController(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public PermissionController get() {
      return Preconditions.checkNotNull(
          appComponent.permissionController(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_chatApi
      implements Provider<ChatApi> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_chatApi(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ChatApi get() {
      return Preconditions.checkNotNull(
          appComponent.chatApi(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_mediaPlayer
      implements Provider<MediaPlayer> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_mediaPlayer(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public MediaPlayer get() {
      return Preconditions.checkNotNull(
          appComponent.mediaPlayer(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_context
      implements Provider<Context> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_context(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(
          appComponent.context(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_imageLoader
      implements Provider<Interactor<Single<Bitmap>, String>> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_imageLoader(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Interactor<Single<Bitmap>, String> get() {
      return Preconditions.checkNotNull(
          appComponent.imageLoader(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class evfor_fun_skvader_dagger2_components_AppComponent_gson
      implements Provider<Gson> {
    private final AppComponent appComponent;

    evfor_fun_skvader_dagger2_components_AppComponent_gson(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Gson get() {
      return Preconditions.checkNotNull(
          appComponent.gson(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private final class ChatSubComponentImpl implements ChatSubComponent {
    private final ChatModule chatModule;

    private Provider<IO.Options> provideSocketClientOptionsProvider;

    private Provider<Socket> provideSocketClientProvider;

    private Provider<ModelConnect> provideModelConnectProvider;

    private Provider<MessageReceiver> messageReceiverProvider;

    private Provider<iSocketListener<Observable<Message>>> messageObserverProvider;

    private Provider<SocketStateListener> socketStateListenerProvider;

    private Provider<iSocketListener<Observable<SocketState>>> socketStateListenerProvider2;

    private Provider<MessageSender> messageSenderProvider;

    private Provider<Interactor<Single<MessageReceive>, MessageSend>> messageSenderProvider2;

    private Provider<MessageReadListener> messageReadListenerProvider;

    private Provider<iSocketListener<Observable<MessageListReaded>>> readListenerProvider;

    private Provider<WriteMessageListener> writeMessageListenerProvider;

    private Provider<iSocketListener<Observable<Writer>>> writeListenerProvider;

    private Provider<WritingInteractor> writingInteractorProvider;

    private Provider<iSocketListener<Completable>> writingProvider;

    private Provider<ReadingInteractor> readingInteractorProvider;

    private Provider<Interactor<Completable, MessageRead>> readMessagesProvider;

    private Provider<SocketImpl> socketImplProvider;

    private Provider<evfor.fun.skvader.utils.socket.Socket> provideSocketProvider;

    private MembersInjector<SocketMessenger> socketMessengerMembersInjector;

    private ChatSubComponentImpl(ChatModule chatModule) {
      this.chatModule = Preconditions.checkNotNull(chatModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideSocketClientOptionsProvider =
          DoubleCheck.provider(ChatModule_ProvideSocketClientOptionsFactory.create(chatModule));

      this.provideSocketClientProvider =
          DoubleCheck.provider(
              ChatModule_ProvideSocketClientFactory.create(
                  chatModule, provideSocketClientOptionsProvider));

      this.provideModelConnectProvider =
          DoubleCheck.provider(ChatModule_ProvideModelConnectFactory.create(chatModule));

      this.messageReceiverProvider =
          MessageReceiver_Factory.create(
              MembersInjectors.<MessageReceiver>noOp(),
              provideSocketClientProvider,
              provideModelConnectProvider,
              DaggerMainComponent.this.gsonProvider);

      this.messageObserverProvider = DoubleCheck.provider((Provider) messageReceiverProvider);

      this.socketStateListenerProvider =
          SocketStateListener_Factory.create(provideSocketClientProvider);

      this.socketStateListenerProvider2 =
          DoubleCheck.provider((Provider) socketStateListenerProvider);

      this.messageSenderProvider =
          MessageSender_Factory.create(
              provideSocketClientProvider,
              provideModelConnectProvider,
              DaggerMainComponent.this.gsonProvider);

      this.messageSenderProvider2 = DoubleCheck.provider((Provider) messageSenderProvider);

      this.messageReadListenerProvider =
          MessageReadListener_Factory.create(
              MembersInjectors.<MessageReadListener>noOp(),
              provideSocketClientProvider,
              provideModelConnectProvider,
              DaggerMainComponent.this.gsonProvider);

      this.readListenerProvider = DoubleCheck.provider((Provider) messageReadListenerProvider);

      this.writeMessageListenerProvider =
          WriteMessageListener_Factory.create(
              MembersInjectors.<WriteMessageListener>noOp(),
              provideSocketClientProvider,
              provideModelConnectProvider,
              DaggerMainComponent.this.gsonProvider);

      this.writeListenerProvider = DoubleCheck.provider((Provider) writeMessageListenerProvider);

      this.writingInteractorProvider =
          WritingInteractor_Factory.create(
              provideSocketClientProvider, provideModelConnectProvider);

      this.writingProvider = DoubleCheck.provider((Provider) writingInteractorProvider);

      this.readingInteractorProvider =
          ReadingInteractor_Factory.create(
              provideSocketClientProvider,
              provideModelConnectProvider,
              DaggerMainComponent.this.gsonProvider);

      this.readMessagesProvider = DoubleCheck.provider((Provider) readingInteractorProvider);

      this.socketImplProvider = SocketImpl_Factory.create(provideSocketClientProvider);

      this.provideSocketProvider = DoubleCheck.provider((Provider) socketImplProvider);

      this.socketMessengerMembersInjector =
          SocketMessenger_MembersInjector.create(
              messageObserverProvider,
              socketStateListenerProvider2,
              messageSenderProvider2,
              readListenerProvider,
              writeListenerProvider,
              writingProvider,
              readMessagesProvider,
              provideSocketProvider);
    }

    @Override
    public void inject(SocketMessenger socketMessenger) {
      socketMessengerMembersInjector.injectMembers(socketMessenger);
    }
  }
}
