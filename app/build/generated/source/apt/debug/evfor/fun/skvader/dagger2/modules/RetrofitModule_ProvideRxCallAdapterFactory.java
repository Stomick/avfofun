// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.dagger2.modules;

import com.jakewharton.retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import evfor.fun.skvader.utils.RxCallAdapter;
import evfor.fun.skvader.utils.iHandler;
import javax.inject.Provider;

public final class RetrofitModule_ProvideRxCallAdapterFactory implements Factory<RxCallAdapter> {
  private final Provider<RxJava2CallAdapterFactory> originalProvider;

  private final Provider<iHandler<Throwable>> errorHandlerProvider;

  public RetrofitModule_ProvideRxCallAdapterFactory(
      Provider<RxJava2CallAdapterFactory> originalProvider,
      Provider<iHandler<Throwable>> errorHandlerProvider) {
    assert originalProvider != null;
    this.originalProvider = originalProvider;
    assert errorHandlerProvider != null;
    this.errorHandlerProvider = errorHandlerProvider;
  }

  @Override
  public RxCallAdapter get() {
    return Preconditions.checkNotNull(
        RetrofitModule.provideRxCallAdapter(originalProvider.get(), errorHandlerProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<RxCallAdapter> create(
      Provider<RxJava2CallAdapterFactory> originalProvider,
      Provider<iHandler<Throwable>> errorHandlerProvider) {
    return new RetrofitModule_ProvideRxCallAdapterFactory(originalProvider, errorHandlerProvider);
  }
}
