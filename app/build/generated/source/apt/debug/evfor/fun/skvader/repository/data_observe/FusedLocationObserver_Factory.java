// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.repository.data_observe;

import com.google.android.gms.location.FusedLocationProviderClient;
import dagger.internal.Factory;
import evfor.fun.skvader.utils.PermissionController;
import javax.inject.Provider;

public final class FusedLocationObserver_Factory implements Factory<FusedLocationObserver> {
  private final Provider<FusedLocationProviderClient> fusedLocationClientProvider;

  private final Provider<PermissionController> permissionControllerProvider;

  public FusedLocationObserver_Factory(
      Provider<FusedLocationProviderClient> fusedLocationClientProvider,
      Provider<PermissionController> permissionControllerProvider) {
    assert fusedLocationClientProvider != null;
    this.fusedLocationClientProvider = fusedLocationClientProvider;
    assert permissionControllerProvider != null;
    this.permissionControllerProvider = permissionControllerProvider;
  }

  @Override
  public FusedLocationObserver get() {
    return new FusedLocationObserver(
        fusedLocationClientProvider.get(), permissionControllerProvider.get());
  }

  public static Factory<FusedLocationObserver> create(
      Provider<FusedLocationProviderClient> fusedLocationClientProvider,
      Provider<PermissionController> permissionControllerProvider) {
    return new FusedLocationObserver_Factory(
        fusedLocationClientProvider, permissionControllerProvider);
  }

  /**
   * Proxies {@link FusedLocationObserver#FusedLocationObserver(FusedLocationProviderClient,
   * PermissionController)}.
   */
  public static FusedLocationObserver newFusedLocationObserver(
      FusedLocationProviderClient fusedLocationClient, PermissionController permissionController) {
    return new FusedLocationObserver(fusedLocationClient, permissionController);
  }
}
