// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActAdmin;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.Message;
import evfor.fun.skvader.models.RqChat;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import evfor.fun.skvader.utils.PermissionController;
import evfor.fun.skvader.utils.media.play.AudioPlayer;
import evfor.fun.skvader.utils.media.record.AudioRecorder;
import evfor.fun.skvader.utils.socket.SocketMessenger;
import io.reactivex.Observable;
import io.reactivex.Single;
import javax.inject.Provider;

public final class DialogPresenter_MembersInjector implements MembersInjector<DialogPresenter> {
  private final Provider<SocketMessenger> messengerProvider;

  private final Provider<PermissionController> permissionControllerProvider;

  private final Provider<Interactor<Observable<? extends User>, ActAdmin>> usersLoaderProvider;

  private final Provider<Interactor<Observable<Message>, RqChat>> messagesLoaderProvider;

  private final Provider<ReaderRepos<User, Integer>> profileLoaderProvider;

  private final Provider<Interactor<Single<ActId>, String>> jointActProvider;

  private final Provider<ReaderRepos<Act, ActId>> actLoaderProvider;

  private final Provider<AudioRecorder> audioRecorderProvider;

  private final Provider<AudioPlayer> audioPlayerProvider;

  public DialogPresenter_MembersInjector(
      Provider<SocketMessenger> messengerProvider,
      Provider<PermissionController> permissionControllerProvider,
      Provider<Interactor<Observable<? extends User>, ActAdmin>> usersLoaderProvider,
      Provider<Interactor<Observable<Message>, RqChat>> messagesLoaderProvider,
      Provider<ReaderRepos<User, Integer>> profileLoaderProvider,
      Provider<Interactor<Single<ActId>, String>> jointActProvider,
      Provider<ReaderRepos<Act, ActId>> actLoaderProvider,
      Provider<AudioRecorder> audioRecorderProvider,
      Provider<AudioPlayer> audioPlayerProvider) {
    assert messengerProvider != null;
    this.messengerProvider = messengerProvider;
    assert permissionControllerProvider != null;
    this.permissionControllerProvider = permissionControllerProvider;
    assert usersLoaderProvider != null;
    this.usersLoaderProvider = usersLoaderProvider;
    assert messagesLoaderProvider != null;
    this.messagesLoaderProvider = messagesLoaderProvider;
    assert profileLoaderProvider != null;
    this.profileLoaderProvider = profileLoaderProvider;
    assert jointActProvider != null;
    this.jointActProvider = jointActProvider;
    assert actLoaderProvider != null;
    this.actLoaderProvider = actLoaderProvider;
    assert audioRecorderProvider != null;
    this.audioRecorderProvider = audioRecorderProvider;
    assert audioPlayerProvider != null;
    this.audioPlayerProvider = audioPlayerProvider;
  }

  public static MembersInjector<DialogPresenter> create(
      Provider<SocketMessenger> messengerProvider,
      Provider<PermissionController> permissionControllerProvider,
      Provider<Interactor<Observable<? extends User>, ActAdmin>> usersLoaderProvider,
      Provider<Interactor<Observable<Message>, RqChat>> messagesLoaderProvider,
      Provider<ReaderRepos<User, Integer>> profileLoaderProvider,
      Provider<Interactor<Single<ActId>, String>> jointActProvider,
      Provider<ReaderRepos<Act, ActId>> actLoaderProvider,
      Provider<AudioRecorder> audioRecorderProvider,
      Provider<AudioPlayer> audioPlayerProvider) {
    return new DialogPresenter_MembersInjector(
        messengerProvider,
        permissionControllerProvider,
        usersLoaderProvider,
        messagesLoaderProvider,
        profileLoaderProvider,
        jointActProvider,
        actLoaderProvider,
        audioRecorderProvider,
        audioPlayerProvider);
  }

  @Override
  public void injectMembers(DialogPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.messenger = messengerProvider.get();
    instance.permissionController = permissionControllerProvider.get();
    instance.usersLoader = usersLoaderProvider.get();
    instance.messagesLoader = messagesLoaderProvider.get();
    instance.profileLoader = profileLoaderProvider.get();
    instance.jointAct = jointActProvider.get();
    instance.actLoader = actLoaderProvider.get();
    instance.audioRecorder = audioRecorderProvider.get();
    instance.audioPlayer = audioPlayerProvider.get();
  }

  public static void injectMessenger(
      DialogPresenter instance, Provider<SocketMessenger> messengerProvider) {
    instance.messenger = messengerProvider.get();
  }

  public static void injectPermissionController(
      DialogPresenter instance, Provider<PermissionController> permissionControllerProvider) {
    instance.permissionController = permissionControllerProvider.get();
  }

  public static void injectUsersLoader(
      DialogPresenter instance,
      Provider<Interactor<Observable<? extends User>, ActAdmin>> usersLoaderProvider) {
    instance.usersLoader = usersLoaderProvider.get();
  }

  public static void injectMessagesLoader(
      DialogPresenter instance,
      Provider<Interactor<Observable<Message>, RqChat>> messagesLoaderProvider) {
    instance.messagesLoader = messagesLoaderProvider.get();
  }

  public static void injectProfileLoader(
      DialogPresenter instance, Provider<ReaderRepos<User, Integer>> profileLoaderProvider) {
    instance.profileLoader = profileLoaderProvider.get();
  }

  public static void injectJointAct(
      DialogPresenter instance, Provider<Interactor<Single<ActId>, String>> jointActProvider) {
    instance.jointAct = jointActProvider.get();
  }

  public static void injectActLoader(
      DialogPresenter instance, Provider<ReaderRepos<Act, ActId>> actLoaderProvider) {
    instance.actLoader = actLoaderProvider.get();
  }

  public static void injectAudioRecorder(
      DialogPresenter instance, Provider<AudioRecorder> audioRecorderProvider) {
    instance.audioRecorder = audioRecorderProvider.get();
  }

  public static void injectAudioPlayer(
      DialogPresenter instance, Provider<AudioPlayer> audioPlayerProvider) {
    instance.audioPlayer = audioPlayerProvider.get();
  }
}
