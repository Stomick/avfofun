// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.interceptors;

import dagger.internal.Factory;
import evfor.fun.skvader.convertors.Converter;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.network.api.ContentApi;
import evfor.fun.skvader.network.models.response.RsAct;
import javax.inject.Provider;

public final class ActByLocationInteractor_Factory implements Factory<ActByLocationInteractor> {
  private final Provider<ContentApi> apiProvider;

  private final Provider<Converter<Act, RsAct>> converterProvider;

  public ActByLocationInteractor_Factory(
      Provider<ContentApi> apiProvider, Provider<Converter<Act, RsAct>> converterProvider) {
    assert apiProvider != null;
    this.apiProvider = apiProvider;
    assert converterProvider != null;
    this.converterProvider = converterProvider;
  }

  @Override
  public ActByLocationInteractor get() {
    return new ActByLocationInteractor(apiProvider.get(), converterProvider.get());
  }

  public static Factory<ActByLocationInteractor> create(
      Provider<ContentApi> apiProvider, Provider<Converter<Act, RsAct>> converterProvider) {
    return new ActByLocationInteractor_Factory(apiProvider, converterProvider);
  }

  /** Proxies {@link ActByLocationInteractor#ActByLocationInteractor(ContentApi, Converter)}. */
  public static ActByLocationInteractor newActByLocationInteractor(
      ContentApi api, Converter<Act, RsAct> converter) {
    return new ActByLocationInteractor(api, converter);
  }
}
