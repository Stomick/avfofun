// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActAdmin;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.DistributionParticipant;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import javax.inject.Provider;

public final class PartsPresenter_MembersInjector implements MembersInjector<PartsPresenter> {
  private final Provider<Interactor<Observable<? extends User>, ActAdmin>> loadParticipantsProvider;

  private final Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider;

  private final Provider<ReaderRepos<Act, ActId>> actReaderProvider;

  private final Provider<Interactor<Completable, DistributionParticipant>> adminParticipantProvider;

  public PartsPresenter_MembersInjector(
      Provider<Interactor<Observable<? extends User>, ActAdmin>> loadParticipantsProvider,
      Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider,
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<Interactor<Completable, DistributionParticipant>> adminParticipantProvider) {
    assert loadParticipantsProvider != null;
    this.loadParticipantsProvider = loadParticipantsProvider;
    assert jointActInterceptorProvider != null;
    this.jointActInterceptorProvider = jointActInterceptorProvider;
    assert actReaderProvider != null;
    this.actReaderProvider = actReaderProvider;
    assert adminParticipantProvider != null;
    this.adminParticipantProvider = adminParticipantProvider;
  }

  public static MembersInjector<PartsPresenter> create(
      Provider<Interactor<Observable<? extends User>, ActAdmin>> loadParticipantsProvider,
      Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider,
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<Interactor<Completable, DistributionParticipant>> adminParticipantProvider) {
    return new PartsPresenter_MembersInjector(
        loadParticipantsProvider,
        jointActInterceptorProvider,
        actReaderProvider,
        adminParticipantProvider);
  }

  @Override
  public void injectMembers(PartsPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.loadParticipants = loadParticipantsProvider.get();
    instance.jointActInterceptor = jointActInterceptorProvider.get();
    instance.actReader = actReaderProvider.get();
    instance.adminParticipant = adminParticipantProvider.get();
  }

  public static void injectLoadParticipants(
      PartsPresenter instance,
      Provider<Interactor<Observable<? extends User>, ActAdmin>> loadParticipantsProvider) {
    instance.loadParticipants = loadParticipantsProvider.get();
  }

  public static void injectJointActInterceptor(
      PartsPresenter instance,
      Provider<Interactor<Single<ActId>, String>> jointActInterceptorProvider) {
    instance.jointActInterceptor = jointActInterceptorProvider.get();
  }

  public static void injectActReader(
      PartsPresenter instance, Provider<ReaderRepos<Act, ActId>> actReaderProvider) {
    instance.actReader = actReaderProvider.get();
  }

  public static void injectAdminParticipant(
      PartsPresenter instance,
      Provider<Interactor<Completable, DistributionParticipant>> adminParticipantProvider) {
    instance.adminParticipant = adminParticipantProvider.get();
  }
}
