// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.interceptors;

import dagger.internal.Factory;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import java.util.Calendar;
import javax.inject.Provider;

public final class CheckAgeRestrictionInteractor_Factory
    implements Factory<CheckAgeRestrictionInteractor> {
  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  private final Provider<Interactor<Integer, Calendar>> ageCalculatingProvider;

  public CheckAgeRestrictionInteractor_Factory(
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<Interactor<Integer, Calendar>> ageCalculatingProvider) {
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
    assert ageCalculatingProvider != null;
    this.ageCalculatingProvider = ageCalculatingProvider;
  }

  @Override
  public CheckAgeRestrictionInteractor get() {
    return new CheckAgeRestrictionInteractor(
        userReaderProvider.get(), ageCalculatingProvider.get());
  }

  public static Factory<CheckAgeRestrictionInteractor> create(
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<Interactor<Integer, Calendar>> ageCalculatingProvider) {
    return new CheckAgeRestrictionInteractor_Factory(userReaderProvider, ageCalculatingProvider);
  }

  /**
   * Proxies {@link CheckAgeRestrictionInteractor#CheckAgeRestrictionInteractor(ReaderRepos,
   * Interactor)}.
   */
  public static CheckAgeRestrictionInteractor newCheckAgeRestrictionInteractor(
      ReaderRepos<User, Integer> userReader, Interactor<Integer, Calendar> ageCalculating) {
    return new CheckAgeRestrictionInteractor(userReader, ageCalculating);
  }
}
