// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.repository.data_observe;

import android.location.LocationManager;
import dagger.internal.Factory;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.City;
import evfor.fun.skvader.network.models.request.RqCity;
import evfor.fun.skvader.utils.PermissionController;
import io.reactivex.Observable;
import javax.inject.Provider;

public final class LocationObserver_Factory implements Factory<LocationObserver> {
  private final Provider<LocationManager> locationManagerProvider;

  private final Provider<PermissionController> permissionControllerProvider;

  private final Provider<Interactor<Observable<City>, RqCity>> cityProvider;

  public LocationObserver_Factory(
      Provider<LocationManager> locationManagerProvider,
      Provider<PermissionController> permissionControllerProvider,
      Provider<Interactor<Observable<City>, RqCity>> cityProvider) {
    assert locationManagerProvider != null;
    this.locationManagerProvider = locationManagerProvider;
    assert permissionControllerProvider != null;
    this.permissionControllerProvider = permissionControllerProvider;
    assert cityProvider != null;
    this.cityProvider = cityProvider;
  }

  @Override
  public LocationObserver get() {
    return new LocationObserver(
        locationManagerProvider.get(), permissionControllerProvider.get(), cityProvider.get());
  }

  public static Factory<LocationObserver> create(
      Provider<LocationManager> locationManagerProvider,
      Provider<PermissionController> permissionControllerProvider,
      Provider<Interactor<Observable<City>, RqCity>> cityProvider) {
    return new LocationObserver_Factory(
        locationManagerProvider, permissionControllerProvider, cityProvider);
  }

  /**
   * Proxies {@link LocationObserver#LocationObserver(LocationManager, PermissionController,
   * Interactor)}.
   */
  public static LocationObserver newLocationObserver(
      LocationManager locationManager,
      PermissionController permissionController,
      Interactor<Observable<City>, RqCity> cityProvider) {
    return new LocationObserver(locationManager, permissionController, cityProvider);
  }
}
