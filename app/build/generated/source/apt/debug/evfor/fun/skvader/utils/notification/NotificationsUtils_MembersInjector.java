// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.utils.notification;

import android.app.NotificationManager;
import android.content.Context;
import android.graphics.Bitmap;
import android.support.v4.app.NotificationCompat;
import dagger.MembersInjector;
import evfor.fun.skvader.convertors.Converter;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Notification;
import evfor.fun.skvader.network.models.response.RsNotification;
import io.reactivex.Single;
import javax.inject.Provider;

public final class NotificationsUtils_MembersInjector
    implements MembersInjector<NotificationsUtils> {
  private final Provider<Context> contextProvider;

  private final Provider<Converter<Notification, RsNotification.Notification>> converterProvider;

  private final Provider<Interactor<Single<Bitmap>, String>> imageLoaderProvider;

  private final Provider<NotificationManager> notificationManagerProvider;

  private final Provider<NotificationCompat.Builder> notoficationBuilderProvider;

  public NotificationsUtils_MembersInjector(
      Provider<Context> contextProvider,
      Provider<Converter<Notification, RsNotification.Notification>> converterProvider,
      Provider<Interactor<Single<Bitmap>, String>> imageLoaderProvider,
      Provider<NotificationManager> notificationManagerProvider,
      Provider<NotificationCompat.Builder> notoficationBuilderProvider) {
    assert contextProvider != null;
    this.contextProvider = contextProvider;
    assert converterProvider != null;
    this.converterProvider = converterProvider;
    assert imageLoaderProvider != null;
    this.imageLoaderProvider = imageLoaderProvider;
    assert notificationManagerProvider != null;
    this.notificationManagerProvider = notificationManagerProvider;
    assert notoficationBuilderProvider != null;
    this.notoficationBuilderProvider = notoficationBuilderProvider;
  }

  public static MembersInjector<NotificationsUtils> create(
      Provider<Context> contextProvider,
      Provider<Converter<Notification, RsNotification.Notification>> converterProvider,
      Provider<Interactor<Single<Bitmap>, String>> imageLoaderProvider,
      Provider<NotificationManager> notificationManagerProvider,
      Provider<NotificationCompat.Builder> notoficationBuilderProvider) {
    return new NotificationsUtils_MembersInjector(
        contextProvider,
        converterProvider,
        imageLoaderProvider,
        notificationManagerProvider,
        notoficationBuilderProvider);
  }

  @Override
  public void injectMembers(NotificationsUtils instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.context = contextProvider.get();
    instance.converter = converterProvider.get();
    instance.imageLoader = imageLoaderProvider.get();
    instance.notificationManager = notificationManagerProvider.get();
    instance.notoficationBuilder = notoficationBuilderProvider.get();
  }

  public static void injectContext(NotificationsUtils instance, Provider<Context> contextProvider) {
    instance.context = contextProvider.get();
  }

  public static void injectConverter(
      NotificationsUtils instance,
      Provider<Converter<Notification, RsNotification.Notification>> converterProvider) {
    instance.converter = converterProvider.get();
  }

  public static void injectImageLoader(
      NotificationsUtils instance,
      Provider<Interactor<Single<Bitmap>, String>> imageLoaderProvider) {
    instance.imageLoader = imageLoaderProvider.get();
  }

  public static void injectNotificationManager(
      NotificationsUtils instance, Provider<NotificationManager> notificationManagerProvider) {
    instance.notificationManager = notificationManagerProvider.get();
  }

  public static void injectNotoficationBuilder(
      NotificationsUtils instance,
      Provider<NotificationCompat.Builder> notoficationBuilderProvider) {
    instance.notoficationBuilder = notoficationBuilderProvider.get();
  }
}
