// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.utils.socket;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Message;
import evfor.fun.skvader.utils.socket.listeners.iSocketListener;
import evfor.fun.skvader.utils.socket.models.MessageListReaded;
import evfor.fun.skvader.utils.socket.models.MessageRead;
import evfor.fun.skvader.utils.socket.models.MessageReceive;
import evfor.fun.skvader.utils.socket.models.MessageSend;
import evfor.fun.skvader.utils.socket.models.SocketState;
import evfor.fun.skvader.utils.socket.models.Writer;
import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import javax.inject.Provider;

public final class SocketMessenger_MembersInjector implements MembersInjector<SocketMessenger> {
  private final Provider<iSocketListener<Observable<Message>>> messageObserverProvider;

  private final Provider<iSocketListener<Observable<SocketState>>> socketStateListenerProvider;

  private final Provider<Interactor<Single<MessageReceive>, MessageSend>> messageSenderProvider;

  private final Provider<iSocketListener<Observable<MessageListReaded>>> readListenerProvider;

  private final Provider<iSocketListener<Observable<Writer>>> writeListenerProvider;

  private final Provider<iSocketListener<Completable>> writingProvider;

  private final Provider<Interactor<Completable, MessageRead>> readMessagesProvider;

  private final Provider<Socket> socketProvider;

  public SocketMessenger_MembersInjector(
      Provider<iSocketListener<Observable<Message>>> messageObserverProvider,
      Provider<iSocketListener<Observable<SocketState>>> socketStateListenerProvider,
      Provider<Interactor<Single<MessageReceive>, MessageSend>> messageSenderProvider,
      Provider<iSocketListener<Observable<MessageListReaded>>> readListenerProvider,
      Provider<iSocketListener<Observable<Writer>>> writeListenerProvider,
      Provider<iSocketListener<Completable>> writingProvider,
      Provider<Interactor<Completable, MessageRead>> readMessagesProvider,
      Provider<Socket> socketProvider) {
    assert messageObserverProvider != null;
    this.messageObserverProvider = messageObserverProvider;
    assert socketStateListenerProvider != null;
    this.socketStateListenerProvider = socketStateListenerProvider;
    assert messageSenderProvider != null;
    this.messageSenderProvider = messageSenderProvider;
    assert readListenerProvider != null;
    this.readListenerProvider = readListenerProvider;
    assert writeListenerProvider != null;
    this.writeListenerProvider = writeListenerProvider;
    assert writingProvider != null;
    this.writingProvider = writingProvider;
    assert readMessagesProvider != null;
    this.readMessagesProvider = readMessagesProvider;
    assert socketProvider != null;
    this.socketProvider = socketProvider;
  }

  public static MembersInjector<SocketMessenger> create(
      Provider<iSocketListener<Observable<Message>>> messageObserverProvider,
      Provider<iSocketListener<Observable<SocketState>>> socketStateListenerProvider,
      Provider<Interactor<Single<MessageReceive>, MessageSend>> messageSenderProvider,
      Provider<iSocketListener<Observable<MessageListReaded>>> readListenerProvider,
      Provider<iSocketListener<Observable<Writer>>> writeListenerProvider,
      Provider<iSocketListener<Completable>> writingProvider,
      Provider<Interactor<Completable, MessageRead>> readMessagesProvider,
      Provider<Socket> socketProvider) {
    return new SocketMessenger_MembersInjector(
        messageObserverProvider,
        socketStateListenerProvider,
        messageSenderProvider,
        readListenerProvider,
        writeListenerProvider,
        writingProvider,
        readMessagesProvider,
        socketProvider);
  }

  @Override
  public void injectMembers(SocketMessenger instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.messageObserver = messageObserverProvider.get();
    instance.socketStateListener = socketStateListenerProvider.get();
    instance.messageSender = messageSenderProvider.get();
    instance.readListener = readListenerProvider.get();
    instance.writeListener = writeListenerProvider.get();
    instance.writing = writingProvider.get();
    instance.readMessages = readMessagesProvider.get();
    instance.socket = socketProvider.get();
  }

  public static void injectMessageObserver(
      SocketMessenger instance,
      Provider<iSocketListener<Observable<Message>>> messageObserverProvider) {
    instance.messageObserver = messageObserverProvider.get();
  }

  public static void injectSocketStateListener(
      SocketMessenger instance,
      Provider<iSocketListener<Observable<SocketState>>> socketStateListenerProvider) {
    instance.socketStateListener = socketStateListenerProvider.get();
  }

  public static void injectMessageSender(
      SocketMessenger instance,
      Provider<Interactor<Single<MessageReceive>, MessageSend>> messageSenderProvider) {
    instance.messageSender = messageSenderProvider.get();
  }

  public static void injectReadListener(
      SocketMessenger instance,
      Provider<iSocketListener<Observable<MessageListReaded>>> readListenerProvider) {
    instance.readListener = readListenerProvider.get();
  }

  public static void injectWriteListener(
      SocketMessenger instance,
      Provider<iSocketListener<Observable<Writer>>> writeListenerProvider) {
    instance.writeListener = writeListenerProvider.get();
  }

  public static void injectWriting(
      SocketMessenger instance, Provider<iSocketListener<Completable>> writingProvider) {
    instance.writing = writingProvider.get();
  }

  public static void injectReadMessages(
      SocketMessenger instance,
      Provider<Interactor<Completable, MessageRead>> readMessagesProvider) {
    instance.readMessages = readMessagesProvider.get();
  }

  public static void injectSocket(SocketMessenger instance, Provider<Socket> socketProvider) {
    instance.socket = socketProvider.get();
  }
}
