// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Social;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import evfor.fun.skvader.repository.Updater;
import io.reactivex.Completable;
import javax.inject.Provider;

public final class SocPresenter_MembersInjector implements MembersInjector<SocPresenter> {
  private final Provider<Interactor<Completable, Social>> sendSocialProvider;

  private final Provider<Updater<User, Integer>> userUpdaterProvider;

  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  public SocPresenter_MembersInjector(
      Provider<Interactor<Completable, Social>> sendSocialProvider,
      Provider<Updater<User, Integer>> userUpdaterProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    assert sendSocialProvider != null;
    this.sendSocialProvider = sendSocialProvider;
    assert userUpdaterProvider != null;
    this.userUpdaterProvider = userUpdaterProvider;
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
  }

  public static MembersInjector<SocPresenter> create(
      Provider<Interactor<Completable, Social>> sendSocialProvider,
      Provider<Updater<User, Integer>> userUpdaterProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    return new SocPresenter_MembersInjector(
        sendSocialProvider, userUpdaterProvider, userReaderProvider);
  }

  @Override
  public void injectMembers(SocPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.sendSocial = sendSocialProvider.get();
    instance.userUpdater = userUpdaterProvider.get();
    instance.userReader = userReaderProvider.get();
  }

  public static void injectSendSocial(
      SocPresenter instance, Provider<Interactor<Completable, Social>> sendSocialProvider) {
    instance.sendSocial = sendSocialProvider.get();
  }

  public static void injectUserUpdater(
      SocPresenter instance, Provider<Updater<User, Integer>> userUpdaterProvider) {
    instance.userUpdater = userUpdaterProvider.get();
  }

  public static void injectUserReader(
      SocPresenter instance, Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    instance.userReader = userReaderProvider.get();
  }
}
