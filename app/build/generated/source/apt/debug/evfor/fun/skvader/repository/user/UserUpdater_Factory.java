// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.repository.user;

import dagger.internal.Factory;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import evfor.fun.skvader.repository.WriterRepos;
import javax.inject.Provider;

public final class UserUpdater_Factory implements Factory<UserUpdater> {
  private final Provider<ReaderRepos<User, Integer>> readerReposProvider;

  private final Provider<WriterRepos<User>> writerReposProvider;

  public UserUpdater_Factory(
      Provider<ReaderRepos<User, Integer>> readerReposProvider,
      Provider<WriterRepos<User>> writerReposProvider) {
    assert readerReposProvider != null;
    this.readerReposProvider = readerReposProvider;
    assert writerReposProvider != null;
    this.writerReposProvider = writerReposProvider;
  }

  @Override
  public UserUpdater get() {
    return new UserUpdater(readerReposProvider.get(), writerReposProvider.get());
  }

  public static Factory<UserUpdater> create(
      Provider<ReaderRepos<User, Integer>> readerReposProvider,
      Provider<WriterRepos<User>> writerReposProvider) {
    return new UserUpdater_Factory(readerReposProvider, writerReposProvider);
  }

  /** Proxies {@link UserUpdater#UserUpdater(ReaderRepos, WriterRepos)}. */
  public static UserUpdater newUserUpdater(
      ReaderRepos<User, Integer> readerRepos, WriterRepos<User> writerRepos) {
    return new UserUpdater(readerRepos, writerRepos);
  }
}
