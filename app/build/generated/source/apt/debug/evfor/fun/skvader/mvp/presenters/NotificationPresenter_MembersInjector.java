// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Notification;
import evfor.fun.skvader.models.NotificationFilter;
import io.reactivex.Observable;
import javax.inject.Provider;

public final class NotificationPresenter_MembersInjector
    implements MembersInjector<NotificationPresenter> {
  private final Provider<Interactor<Observable<Notification>, NotificationFilter>>
      notificationProvider;

  public NotificationPresenter_MembersInjector(
      Provider<Interactor<Observable<Notification>, NotificationFilter>> notificationProvider) {
    assert notificationProvider != null;
    this.notificationProvider = notificationProvider;
  }

  public static MembersInjector<NotificationPresenter> create(
      Provider<Interactor<Observable<Notification>, NotificationFilter>> notificationProvider) {
    return new NotificationPresenter_MembersInjector(notificationProvider);
  }

  @Override
  public void injectMembers(NotificationPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.notificationProvider = notificationProvider.get();
  }

  public static void injectNotificationProvider(
      NotificationPresenter instance,
      Provider<Interactor<Observable<Notification>, NotificationFilter>> notificationProvider) {
    instance.notificationProvider = notificationProvider.get();
  }
}
