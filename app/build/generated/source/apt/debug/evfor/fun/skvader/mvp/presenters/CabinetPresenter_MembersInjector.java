// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.UpdatePhoto;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import evfor.fun.skvader.repository.WriterRepos;
import io.reactivex.Completable;
import io.reactivex.Single;
import javax.inject.Provider;

public final class CabinetPresenter_MembersInjector implements MembersInjector<CabinetPresenter> {
  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  private final Provider<Interactor<Single<ActId>, String>> jointActProvider;

  private final Provider<WriterRepos<User>> userWriterProvider;

  private final Provider<Interactor<Completable, UpdatePhoto>> updatePhotoProvider;

  private final Provider<ReaderRepos<Act, ActId>> actLoaderProvider;

  public CabinetPresenter_MembersInjector(
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<Interactor<Single<ActId>, String>> jointActProvider,
      Provider<WriterRepos<User>> userWriterProvider,
      Provider<Interactor<Completable, UpdatePhoto>> updatePhotoProvider,
      Provider<ReaderRepos<Act, ActId>> actLoaderProvider) {
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
    assert jointActProvider != null;
    this.jointActProvider = jointActProvider;
    assert userWriterProvider != null;
    this.userWriterProvider = userWriterProvider;
    assert updatePhotoProvider != null;
    this.updatePhotoProvider = updatePhotoProvider;
    assert actLoaderProvider != null;
    this.actLoaderProvider = actLoaderProvider;
  }

  public static MembersInjector<CabinetPresenter> create(
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<Interactor<Single<ActId>, String>> jointActProvider,
      Provider<WriterRepos<User>> userWriterProvider,
      Provider<Interactor<Completable, UpdatePhoto>> updatePhotoProvider,
      Provider<ReaderRepos<Act, ActId>> actLoaderProvider) {
    return new CabinetPresenter_MembersInjector(
        userReaderProvider,
        jointActProvider,
        userWriterProvider,
        updatePhotoProvider,
        actLoaderProvider);
  }

  @Override
  public void injectMembers(CabinetPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.userReader = userReaderProvider.get();
    instance.jointAct = jointActProvider.get();
    instance.userWriter = userWriterProvider.get();
    instance.updatePhoto = updatePhotoProvider.get();
    instance.actLoader = actLoaderProvider.get();
  }

  public static void injectUserReader(
      CabinetPresenter instance, Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    instance.userReader = userReaderProvider.get();
  }

  public static void injectJointAct(
      CabinetPresenter instance, Provider<Interactor<Single<ActId>, String>> jointActProvider) {
    instance.jointAct = jointActProvider.get();
  }

  public static void injectUserWriter(
      CabinetPresenter instance, Provider<WriterRepos<User>> userWriterProvider) {
    instance.userWriter = userWriterProvider.get();
  }

  public static void injectUpdatePhoto(
      CabinetPresenter instance,
      Provider<Interactor<Completable, UpdatePhoto>> updatePhotoProvider) {
    instance.updatePhoto = updatePhotoProvider.get();
  }

  public static void injectActLoader(
      CabinetPresenter instance, Provider<ReaderRepos<Act, ActId>> actLoaderProvider) {
    instance.actLoader = actLoaderProvider.get();
  }
}
