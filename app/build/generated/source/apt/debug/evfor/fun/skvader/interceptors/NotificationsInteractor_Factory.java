// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.interceptors;

import dagger.internal.Factory;
import evfor.fun.skvader.convertors.Converter;
import evfor.fun.skvader.models.Notification;
import evfor.fun.skvader.network.api.MainApi;
import evfor.fun.skvader.network.models.response.RsNotification;
import javax.inject.Provider;

public final class NotificationsInteractor_Factory implements Factory<NotificationsInteractor> {
  private final Provider<MainApi> apiProvider;

  private final Provider<Converter<Notification, RsNotification.Notification>> converterProvider;

  public NotificationsInteractor_Factory(
      Provider<MainApi> apiProvider,
      Provider<Converter<Notification, RsNotification.Notification>> converterProvider) {
    assert apiProvider != null;
    this.apiProvider = apiProvider;
    assert converterProvider != null;
    this.converterProvider = converterProvider;
  }

  @Override
  public NotificationsInteractor get() {
    return new NotificationsInteractor(apiProvider.get(), converterProvider.get());
  }

  public static Factory<NotificationsInteractor> create(
      Provider<MainApi> apiProvider,
      Provider<Converter<Notification, RsNotification.Notification>> converterProvider) {
    return new NotificationsInteractor_Factory(apiProvider, converterProvider);
  }

  /** Proxies {@link NotificationsInteractor#NotificationsInteractor(MainApi, Converter)}. */
  public static NotificationsInteractor newNotificationsInteractor(
      MainApi api, Converter<Notification, RsNotification.Notification> converter) {
    return new NotificationsInteractor(api, converter);
  }
}
