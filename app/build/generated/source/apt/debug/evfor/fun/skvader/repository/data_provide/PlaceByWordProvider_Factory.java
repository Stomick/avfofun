// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.repository.data_provide;

import dagger.internal.Factory;
import evfor.fun.skvader.convertors.Converter;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Address;
import evfor.fun.skvader.network.api.ContentApi;
import evfor.fun.skvader.network.models.response.RsPlaces;
import io.reactivex.Single;
import javax.inject.Provider;

public final class PlaceByWordProvider_Factory implements Factory<PlaceByWordProvider> {
  private final Provider<ContentApi> apiProvider;

  private final Provider<Converter<Address, RsPlaces.Places>> converterProvider;

  private final Provider<Interactor<Single<Address>, Address>> improvementProvider;

  public PlaceByWordProvider_Factory(
      Provider<ContentApi> apiProvider,
      Provider<Converter<Address, RsPlaces.Places>> converterProvider,
      Provider<Interactor<Single<Address>, Address>> improvementProvider) {
    assert apiProvider != null;
    this.apiProvider = apiProvider;
    assert converterProvider != null;
    this.converterProvider = converterProvider;
    assert improvementProvider != null;
    this.improvementProvider = improvementProvider;
  }

  @Override
  public PlaceByWordProvider get() {
    return new PlaceByWordProvider(
        apiProvider.get(), converterProvider.get(), improvementProvider.get());
  }

  public static Factory<PlaceByWordProvider> create(
      Provider<ContentApi> apiProvider,
      Provider<Converter<Address, RsPlaces.Places>> converterProvider,
      Provider<Interactor<Single<Address>, Address>> improvementProvider) {
    return new PlaceByWordProvider_Factory(apiProvider, converterProvider, improvementProvider);
  }

  /** Proxies {@link PlaceByWordProvider#PlaceByWordProvider(ContentApi, Converter, Interactor)}. */
  public static PlaceByWordProvider newPlaceByWordProvider(
      ContentApi api,
      Converter<Address, RsPlaces.Places> converter,
      Interactor<Single<Address>, Address> improvement) {
    return new PlaceByWordProvider(api, converter, improvement);
  }
}
