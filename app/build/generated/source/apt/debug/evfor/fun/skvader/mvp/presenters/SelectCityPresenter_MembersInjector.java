// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.City;
import evfor.fun.skvader.network.models.request.RqCity;
import io.reactivex.Observable;
import javax.inject.Provider;

public final class SelectCityPresenter_MembersInjector
    implements MembersInjector<SelectCityPresenter> {
  private final Provider<Interactor<Observable<City>, RqCity>> cityProvider;

  public SelectCityPresenter_MembersInjector(
      Provider<Interactor<Observable<City>, RqCity>> cityProvider) {
    assert cityProvider != null;
    this.cityProvider = cityProvider;
  }

  public static MembersInjector<SelectCityPresenter> create(
      Provider<Interactor<Observable<City>, RqCity>> cityProvider) {
    return new SelectCityPresenter_MembersInjector(cityProvider);
  }

  @Override
  public void injectMembers(SelectCityPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.cityProvider = cityProvider.get();
  }

  public static void injectCityProvider(
      SelectCityPresenter instance, Provider<Interactor<Observable<City>, RqCity>> cityProvider) {
    instance.cityProvider = cityProvider.get();
  }
}
