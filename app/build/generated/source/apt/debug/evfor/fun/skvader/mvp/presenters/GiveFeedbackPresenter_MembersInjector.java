// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.FeedBack;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.network.models.response.RsBase;
import evfor.fun.skvader.repository.ReaderRepos;
import io.reactivex.Single;
import java.util.Calendar;
import javax.inject.Provider;

public final class GiveFeedbackPresenter_MembersInjector
    implements MembersInjector<GiveFeedbackPresenter> {
  private final Provider<ReaderRepos<Act, ActId>> actReaderProvider;

  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  private final Provider<Interactor<Single<RsBase>, FeedBack>> feedBackSenderProvider;

  private final Provider<Interactor<Integer, Calendar>> ageCalculatingProvider;

  public GiveFeedbackPresenter_MembersInjector(
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<Interactor<Single<RsBase>, FeedBack>> feedBackSenderProvider,
      Provider<Interactor<Integer, Calendar>> ageCalculatingProvider) {
    assert actReaderProvider != null;
    this.actReaderProvider = actReaderProvider;
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
    assert feedBackSenderProvider != null;
    this.feedBackSenderProvider = feedBackSenderProvider;
    assert ageCalculatingProvider != null;
    this.ageCalculatingProvider = ageCalculatingProvider;
  }

  public static MembersInjector<GiveFeedbackPresenter> create(
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<Interactor<Single<RsBase>, FeedBack>> feedBackSenderProvider,
      Provider<Interactor<Integer, Calendar>> ageCalculatingProvider) {
    return new GiveFeedbackPresenter_MembersInjector(
        actReaderProvider, userReaderProvider, feedBackSenderProvider, ageCalculatingProvider);
  }

  @Override
  public void injectMembers(GiveFeedbackPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.actReader = actReaderProvider.get();
    instance.userReader = userReaderProvider.get();
    instance.feedBackSender = feedBackSenderProvider.get();
    instance.ageCalculating = ageCalculatingProvider.get();
  }

  public static void injectActReader(
      GiveFeedbackPresenter instance, Provider<ReaderRepos<Act, ActId>> actReaderProvider) {
    instance.actReader = actReaderProvider.get();
  }

  public static void injectUserReader(
      GiveFeedbackPresenter instance, Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    instance.userReader = userReaderProvider.get();
  }

  public static void injectFeedBackSender(
      GiveFeedbackPresenter instance,
      Provider<Interactor<Single<RsBase>, FeedBack>> feedBackSenderProvider) {
    instance.feedBackSender = feedBackSenderProvider.get();
  }

  public static void injectAgeCalculating(
      GiveFeedbackPresenter instance,
      Provider<Interactor<Integer, Calendar>> ageCalculatingProvider) {
    instance.ageCalculating = ageCalculatingProvider.get();
  }
}
