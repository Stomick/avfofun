// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.models.Address;
import evfor.fun.skvader.models.Location;
import evfor.fun.skvader.repository.data_provide.DataProvide1;
import java.util.List;
import javax.inject.Provider;

public final class SelectAddressPresenter_MembersInjector
    implements MembersInjector<SelectAddressPresenter> {
  private final Provider<DataProvide1<List<Address>, Location>> placeByLocProvider;

  private final Provider<DataProvide1<List<Address>, String>> placeByWordProvider;

  public SelectAddressPresenter_MembersInjector(
      Provider<DataProvide1<List<Address>, Location>> placeByLocProvider,
      Provider<DataProvide1<List<Address>, String>> placeByWordProvider) {
    assert placeByLocProvider != null;
    this.placeByLocProvider = placeByLocProvider;
    assert placeByWordProvider != null;
    this.placeByWordProvider = placeByWordProvider;
  }

  public static MembersInjector<SelectAddressPresenter> create(
      Provider<DataProvide1<List<Address>, Location>> placeByLocProvider,
      Provider<DataProvide1<List<Address>, String>> placeByWordProvider) {
    return new SelectAddressPresenter_MembersInjector(placeByLocProvider, placeByWordProvider);
  }

  @Override
  public void injectMembers(SelectAddressPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.placeByLoc = placeByLocProvider.get();
    instance.placeByWord = placeByWordProvider.get();
  }

  public static void injectPlaceByLoc(
      SelectAddressPresenter instance,
      Provider<DataProvide1<List<Address>, Location>> placeByLocProvider) {
    instance.placeByLoc = placeByLocProvider.get();
  }

  public static void injectPlaceByWord(
      SelectAddressPresenter instance,
      Provider<DataProvide1<List<Address>, String>> placeByWordProvider) {
    instance.placeByWord = placeByWordProvider.get();
  }
}
