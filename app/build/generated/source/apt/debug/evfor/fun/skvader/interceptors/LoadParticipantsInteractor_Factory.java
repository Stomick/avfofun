// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.interceptors;

import dagger.internal.Factory;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.network.api.MainApi;
import evfor.fun.skvader.repository.ReaderRepos;
import javax.inject.Provider;

public final class LoadParticipantsInteractor_Factory
    implements Factory<LoadParticipantsInteractor> {
  private final Provider<ReaderRepos<Act, ActId>> actReaderProvider;

  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  private final Provider<MainApi> apiProvider;

  public LoadParticipantsInteractor_Factory(
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<MainApi> apiProvider) {
    assert actReaderProvider != null;
    this.actReaderProvider = actReaderProvider;
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
    assert apiProvider != null;
    this.apiProvider = apiProvider;
  }

  @Override
  public LoadParticipantsInteractor get() {
    return new LoadParticipantsInteractor(
        actReaderProvider.get(), userReaderProvider.get(), apiProvider.get());
  }

  public static Factory<LoadParticipantsInteractor> create(
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider,
      Provider<MainApi> apiProvider) {
    return new LoadParticipantsInteractor_Factory(
        actReaderProvider, userReaderProvider, apiProvider);
  }
}
