// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.utils;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;
import retrofit2.CallAdapter;

public final class RxCallAdapter_Factory implements Factory<RxCallAdapter> {
  private final MembersInjector<RxCallAdapter> rxCallAdapterMembersInjector;

  private final Provider<CallAdapter.Factory> originalProvider;

  private final Provider<iHandler<Throwable>> errorHandlerProvider;

  public RxCallAdapter_Factory(
      MembersInjector<RxCallAdapter> rxCallAdapterMembersInjector,
      Provider<CallAdapter.Factory> originalProvider,
      Provider<iHandler<Throwable>> errorHandlerProvider) {
    assert rxCallAdapterMembersInjector != null;
    this.rxCallAdapterMembersInjector = rxCallAdapterMembersInjector;
    assert originalProvider != null;
    this.originalProvider = originalProvider;
    assert errorHandlerProvider != null;
    this.errorHandlerProvider = errorHandlerProvider;
  }

  @Override
  public RxCallAdapter get() {
    return MembersInjectors.injectMembers(
        rxCallAdapterMembersInjector,
        new RxCallAdapter(originalProvider.get(), errorHandlerProvider.get()));
  }

  public static Factory<RxCallAdapter> create(
      MembersInjector<RxCallAdapter> rxCallAdapterMembersInjector,
      Provider<CallAdapter.Factory> originalProvider,
      Provider<iHandler<Throwable>> errorHandlerProvider) {
    return new RxCallAdapter_Factory(
        rxCallAdapterMembersInjector, originalProvider, errorHandlerProvider);
  }
}
