// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.models.Location;
import evfor.fun.skvader.repository.data_observe.DataObserver;
import evfor.fun.skvader.utils.PermissionController;
import javax.inject.Provider;

public final class SelectLocationPresenter_MembersInjector
    implements MembersInjector<SelectLocationPresenter> {
  private final Provider<DataObserver<Location>> locationControllerProvider;

  private final Provider<PermissionController> permissionControllerProvider;

  public SelectLocationPresenter_MembersInjector(
      Provider<DataObserver<Location>> locationControllerProvider,
      Provider<PermissionController> permissionControllerProvider) {
    assert locationControllerProvider != null;
    this.locationControllerProvider = locationControllerProvider;
    assert permissionControllerProvider != null;
    this.permissionControllerProvider = permissionControllerProvider;
  }

  public static MembersInjector<SelectLocationPresenter> create(
      Provider<DataObserver<Location>> locationControllerProvider,
      Provider<PermissionController> permissionControllerProvider) {
    return new SelectLocationPresenter_MembersInjector(
        locationControllerProvider, permissionControllerProvider);
  }

  @Override
  public void injectMembers(SelectLocationPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.locationController = locationControllerProvider.get();
    instance.permissionController = permissionControllerProvider.get();
  }

  public static void injectLocationController(
      SelectLocationPresenter instance,
      Provider<DataObserver<Location>> locationControllerProvider) {
    instance.locationController = locationControllerProvider.get();
  }

  public static void injectPermissionController(
      SelectLocationPresenter instance,
      Provider<PermissionController> permissionControllerProvider) {
    instance.permissionController = permissionControllerProvider.get();
  }
}
