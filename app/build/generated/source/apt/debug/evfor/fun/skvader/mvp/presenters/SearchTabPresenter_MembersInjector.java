// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.Category;
import evfor.fun.skvader.models.FilterModel;
import evfor.fun.skvader.repository.data_provide.DataProvide;
import io.reactivex.Observable;
import java.util.List;
import javax.inject.Provider;

public final class SearchTabPresenter_MembersInjector
    implements MembersInjector<SearchTabPresenter> {
  private final Provider<DataProvide<List<Category>>> provideCategoriesProvider;

  private final Provider<Interactor<Observable<Act>, FilterModel>> filterProvider;

  public SearchTabPresenter_MembersInjector(
      Provider<DataProvide<List<Category>>> provideCategoriesProvider,
      Provider<Interactor<Observable<Act>, FilterModel>> filterProvider) {
    assert provideCategoriesProvider != null;
    this.provideCategoriesProvider = provideCategoriesProvider;
    assert filterProvider != null;
    this.filterProvider = filterProvider;
  }

  public static MembersInjector<SearchTabPresenter> create(
      Provider<DataProvide<List<Category>>> provideCategoriesProvider,
      Provider<Interactor<Observable<Act>, FilterModel>> filterProvider) {
    return new SearchTabPresenter_MembersInjector(provideCategoriesProvider, filterProvider);
  }

  @Override
  public void injectMembers(SearchTabPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.provideCategories = provideCategoriesProvider.get();
    instance.filter = filterProvider.get();
  }

  public static void injectProvideCategories(
      SearchTabPresenter instance,
      Provider<DataProvide<List<Category>>> provideCategoriesProvider) {
    instance.provideCategories = provideCategoriesProvider.get();
  }

  public static void injectFilter(
      SearchTabPresenter instance,
      Provider<Interactor<Observable<Act>, FilterModel>> filterProvider) {
    instance.filter = filterProvider.get();
  }
}
