// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.interceptors;

import dagger.internal.Factory;
import evfor.fun.skvader.convertors.Converter;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.Category;
import evfor.fun.skvader.network.api.ContentApi;
import evfor.fun.skvader.network.models.response.RsAct;
import evfor.fun.skvader.repository.data_provide.DataProvide;
import java.util.List;
import javax.inject.Provider;

public final class FilterInteractor_Factory implements Factory<FilterInteractor> {
  private final Provider<ContentApi> apiProvider;

  private final Provider<DataProvide<List<Category>>> provideCategoriesProvider;

  private final Provider<AsyncList<ActId>> bannedListProvider;

  private final Provider<Converter<Act, RsAct>> converterProvider;

  public FilterInteractor_Factory(
      Provider<ContentApi> apiProvider,
      Provider<DataProvide<List<Category>>> provideCategoriesProvider,
      Provider<AsyncList<ActId>> bannedListProvider,
      Provider<Converter<Act, RsAct>> converterProvider) {
    assert apiProvider != null;
    this.apiProvider = apiProvider;
    assert provideCategoriesProvider != null;
    this.provideCategoriesProvider = provideCategoriesProvider;
    assert bannedListProvider != null;
    this.bannedListProvider = bannedListProvider;
    assert converterProvider != null;
    this.converterProvider = converterProvider;
  }

  @Override
  public FilterInteractor get() {
    return new FilterInteractor(
        apiProvider.get(),
        provideCategoriesProvider.get(),
        bannedListProvider.get(),
        converterProvider.get());
  }

  public static Factory<FilterInteractor> create(
      Provider<ContentApi> apiProvider,
      Provider<DataProvide<List<Category>>> provideCategoriesProvider,
      Provider<AsyncList<ActId>> bannedListProvider,
      Provider<Converter<Act, RsAct>> converterProvider) {
    return new FilterInteractor_Factory(
        apiProvider, provideCategoriesProvider, bannedListProvider, converterProvider);
  }

  /**
   * Proxies {@link FilterInteractor#FilterInteractor(ContentApi, DataProvide, AsyncList,
   * Converter)}.
   */
  public static FilterInteractor newFilterInteractor(
      ContentApi api,
      DataProvide<List<Category>> provideCategories,
      AsyncList<ActId> bannedList,
      Converter<Act, RsAct> converter) {
    return new FilterInteractor(api, provideCategories, bannedList, converter);
  }
}
