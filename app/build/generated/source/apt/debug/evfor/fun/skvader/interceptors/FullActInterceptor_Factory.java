// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.interceptors;

import dagger.internal.Factory;
import evfor.fun.skvader.models.Act;
import evfor.fun.skvader.models.ActId;
import evfor.fun.skvader.models.User;
import evfor.fun.skvader.repository.ReaderRepos;
import javax.inject.Provider;

public final class FullActInterceptor_Factory implements Factory<FullActInterceptor> {
  private final Provider<ReaderRepos<Act, ActId>> actReaderProvider;

  private final Provider<ReaderRepos<User, Integer>> userReaderProvider;

  public FullActInterceptor_Factory(
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    assert actReaderProvider != null;
    this.actReaderProvider = actReaderProvider;
    assert userReaderProvider != null;
    this.userReaderProvider = userReaderProvider;
  }

  @Override
  public FullActInterceptor get() {
    return new FullActInterceptor(actReaderProvider.get(), userReaderProvider.get());
  }

  public static Factory<FullActInterceptor> create(
      Provider<ReaderRepos<Act, ActId>> actReaderProvider,
      Provider<ReaderRepos<User, Integer>> userReaderProvider) {
    return new FullActInterceptor_Factory(actReaderProvider, userReaderProvider);
  }

  /** Proxies {@link FullActInterceptor#FullActInterceptor(ReaderRepos, ReaderRepos)}. */
  public static FullActInterceptor newFullActInterceptor(
      ReaderRepos<Act, ActId> actReader, ReaderRepos<User, Integer> userReader) {
    return new FullActInterceptor(actReader, userReader);
  }
}
