// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package evfor.fun.skvader.mvp.presenters;

import dagger.MembersInjector;
import evfor.fun.skvader.interceptors.Interactor;
import evfor.fun.skvader.models.NewPassword;
import io.reactivex.Completable;
import javax.inject.Provider;

public final class ChangePasswordPresenter_MembersInjector
    implements MembersInjector<ChangePasswordPresenter> {
  private final Provider<Interactor<Completable, NewPassword>> changePassProvider;

  public ChangePasswordPresenter_MembersInjector(
      Provider<Interactor<Completable, NewPassword>> changePassProvider) {
    assert changePassProvider != null;
    this.changePassProvider = changePassProvider;
  }

  public static MembersInjector<ChangePasswordPresenter> create(
      Provider<Interactor<Completable, NewPassword>> changePassProvider) {
    return new ChangePasswordPresenter_MembersInjector(changePassProvider);
  }

  @Override
  public void injectMembers(ChangePasswordPresenter instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.changePass = changePassProvider.get();
  }

  public static void injectChangePass(
      ChangePasswordPresenter instance,
      Provider<Interactor<Completable, NewPassword>> changePassProvider) {
    instance.changePass = changePassProvider.get();
  }
}
